<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<question type="category">
    <category>
        <text>$module$/DDL-DML</text>
    </category>
</question>
<question type="coderunner">
    <name>
        <text>DDL-DB</text>
    </name>
    <questiontext format="html">
        <text><![CDATA[<p>This is a DDL question</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
        <text><![CDATA[<p>Die Beschreibungen der Tests geben Ihnen Hinweise auf die Korrektheit Ihrer Lösung.</p>]]></text>
    </generalfeedback>
    <idnumber></idnumber>
    <defaultgrade>8.0</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[]]></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns><![CDATA[[["Testfall", "extra"], ["Bewertung", "awarded"]]]]></resultcolumns>
    <template><![CDATA[from __future__ import annotations

import json
import os
import shutil
import sys

os.mkdir("cr_testeval")
shutil.move("__init__.py", "cr_testeval")
shutil.move("cr_testeval.py", "cr_testeval")
shutil.move("ddl_testeval.py", "cr_testeval")

from cr_testeval.cr_testeval import CRTestCase, CRDisplayType
from cr_testeval.ddl_testeval import DDLTestCase

import duckdb

MAX_ROWS = 50
MAX_WIDTH = 500

# Use Twig to get students answer
student_answer = """{{ STUDENT_ANSWER | e('py') }}""".rstrip()

# Parsing the student answer
if not student_answer.endswith(";"):
    student_answer = student_answer + ";"
if "pragma" in student_answer.lower():
    raise ValueError("It is not allowed to use PRAGMA statements.")

# Getting the database file
db_files = [fname for fname in os.listdir() if fname.endswith(".db")]
if len(db_files) == 0:
    db_working = ":memory:"
elif len(db_files) == 1:
    db_working = db_files[0]  # Strip .db extension
else:
    raise Exception("Multiple DB files not implemented yet, sorry!")

SEPARATOR = "#<ab@17943918#@>#"
#test_results = [["Testfall", "Bewertung", "Maximal erreichbar", "iscorrect", "ishidden"]]
test_results = [["Testfall", "Erhalten", "Erwartet", "iscorrect", "ishidden", ""]]

old_stdout = sys.stdout

test_cases = []
# Collecting all test cases
{% for TEST in TESTCASES %}

tc_max = {{ TEST.mark | e('py') }}
tc_max = tc_max if tc_max > 0.005 else 0.0

test_cases.append(
    CRTestCase(
        testcode="""{{ TEST.testcode | e('py') }}""",
        extra="""{{ TEST.extra | e('py') }}""",
        expected_result="""{{ TEST.expected | e('py') }}""",
        testcase_max=tc_max,
        additional_info= {{ TEST.stdin | e('py') }},
        hide_rest_if_fail= {{ TEST.hiderestiffail | e('py') }},
        display=CRDisplayType.from_str("{{ TEST.display | e('py') }}"),
    ))

{% endfor %}

question_memlimitmb = "{{ QUESTION.memlimitmb | e('py') }}"

abort_tests = False

hide_rest_if_fail = False
awarded_points = 0.0
first_error = ""

for tc in test_cases:
    if not abort_tests and not hide_rest_if_fail:
        received_result, expected_result, evaluated_result, errors = DDLTestCase.evaluate_testcase(testcase=tc,
                                                                                                   student_answer=student_answer,
                                                                                                   hide_rest_if_fail=hide_rest_if_fail,
                                                                                                   db_working=db_working,
                                                                                                   db_files=db_files,
                                                                                                   max_rows=MAX_ROWS,
                                                                                                   max_width=MAX_WIDTH,
                                                                                                   question_memlimitmb=question_memlimitmb)

        testcase_max = tc.testcase_max
        testcase_grade = testcase_max if evaluated_result else 0.0
        awarded_points += testcase_grade

        tc_grade_str = f"{testcase_grade:.3f}" if testcase_max > 0.005 else "–––"
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc.extra,
            " " * (10 - len(tc_grade_str)) + tc_grade_str,
            " " * (10 - len(tc_max_str)) + tc_max_str,
            evaluated_result,
            hide_rest_if_fail
            or tc.display == CRDisplayType.HIDE
            or (tc.display == CRDisplayType.HIDE_IF_SUCCEED and evaluated_result)
            or (tc.display == CRDisplayType.HIDE_IF_FAIL and not evaluated_result),
            ""
        ])

        test_results.append([
            tc.extra,
            received_result,
            expected_result,
            evaluated_result,
            True,
            tc.testcode
        ])

        if errors:
            first_error = [e for e in errors if e.strip()][0] if errors else None
            abort_tests = True

        hide_rest_if_fail = (tc.hide_rest_if_fail and not evaluated_result) or hide_rest_if_fail

    else:
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc.extra,
            " " * 5 + "0.000",
            " " * (10 - len(tc_max_str)) + tc_max_str,
            False,
            not tc.hide_rest_if_fail
        ])

total_points = sum(tc.testcase_max for tc in test_cases)

if first_error:
    error_out = f'<h3>Erste Fehlermeldung</h3><pre style="margin-bottom: 1em"><code>{first_error}</code></pre>'
else:
    error_out = '<h3>Keine Fehlermeldungen gefunden 🙂</h3>'

output = {
    'fraction': awarded_points / total_points if total_points > 0 else 0,
    'prologuehtml': error_out,
    "epiloguehtml": f"<h3>Gesamtpunktzahl: {awarded_points} / {total_points}</h3>",
    'testresults': test_results,
    "showdifferences": True
}

print(json.dumps(output))
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>0</allowmultiplestdins>
    <answer><![CDATA[CREATE TABLE thisisatest (id INTEGER PRIMARY KEY,
                                     name TEXT NOT NULL);]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang>sql</acelang>
    <sandbox></sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandboxparams><![CDATA[{"numprocs": 200}]]></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <extractcodefromjson>1</extractcodefromjson>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>ace</uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{'keyword_present': 'create'}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[keyword 'create' is present.]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektes SQL-Keyword verwendet]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="0.001">
            <testcode>
                <text><![CDATA[SELECT version() AS "version";]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌─────────┐
│ version │
│ varchar │
├─────────┤
│ v1.2.2  │
└─────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Test auf Laufzeitfehler]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);

----------
 -- Column types
-- fixed types
WITH flex_cols AS
  (SELECT lower(unnest(map_keys(MAP {}))) AS name_type),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name)
SELECT lower(name_type),
       datatype
FROM student_datatype ANTI
JOIN flex_cols ON student_datatype.name_type = flex_cols.name_type
ORDER BY lower(name_type);

-- flexible types
WITH flextype_table AS
  (SELECT unnest(map_entries(MAP {}), RECURSIVE := TRUE)),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name),
     flextype_flat AS
  (SELECT lower("key") AS col,
          unnest("value") AS datatype
   FROM flextype_table),
     correct_types AS
  (SELECT flextype_flat.col AS flexible_column_name
   FROM flextype_flat
   JOIN student_datatype ON flextype_flat.col = student_datatype.name_type
   AND flextype_flat.datatype = student_datatype.datatype)
SELECT lower(flexible_column_name),
       '## viable_flex_type ##' AS flex_type
FROM correct_types
UNION ALL
SELECT DISTINCT lower(flextype_flat.col) AS flexible_column_name,
                '## non_viable_flex_type ##' AS flex_type
FROM flextype_flat ANTI
JOIN correct_types ON flextype_flat.col = correct_types.flexible_column_name;

----------
 -- Not null columns

SELECT lower(name) AS name_notnull_nopk
FROM pragma_table_info("thisisatest")
WHERE "notnull"
  AND NOT "pk"
  AND NOT "dflt_value"
ORDER BY lower(name);

----------
 -- Unique constraint

SELECT lower(unnest(constraint_column_names)) AS name_unique
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'UNIQUE'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_unique);

----------
 -- Primary key columns

SELECT lower(name) AS name_primarykey
FROM pragma_table_info("thisisatest")
WHERE pk
ORDER BY lower(name);

----------
 -- Foreign key columns

SELECT lower(unnest(constraint_column_names)) AS name_fk_from,
       lower(constraint_text) AS fk_constraint_text
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'FOREIGN KEY'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_fk_from);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

┌──────────────────┬──────────┐
│ lower(name_type) │ datatype │
│     varchar      │ varchar  │
├──────────────────┼──────────┤
│ id               │ INTEGER  │
│ name             │ VARCHAR  │
└──────────────────┴──────────┘

┌─────────────────────────────┬───────────┐
│ lower(flexible_column_name) │ flex_type │
│           varchar           │  varchar  │
├─────────────────────────────┴───────────┤
│                 0 rows                  │
└─────────────────────────────────────────┘

┌───────────────────┐
│ name_notnull_nopk │
│      varchar      │
├───────────────────┤
│      0 rows       │
└───────────────────┘

┌─────────────┐
│ name_unique │
│   varchar   │
├─────────────┤
│   0 rows    │
└─────────────┘

┌─────────────────┐
│ name_primarykey │
│     varchar     │
├─────────────────┤
│ id              │
└─────────────────┘

┌──────────────┬────────────────────┐
│ name_fk_from │ fk_constraint_text │
│   varchar    │      varchar       │
├──────────────┴────────────────────┤
│              0 rows               │
└───────────────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Tabelle thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Attribute thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <file name="emptydb.db" path="/" encoding="base64">
            
        </file>
        <file name="ddl_testeval.py" path="/" encoding="base64">
            aW1wb3J0IGlvCmltcG9ydCByZQppbXBvcnQgc2h1dGlsCmZyb20gY29udGV4dGxpYiBpbXBvcnQgcmVkaXJlY3Rfc3Rkb3V0CmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIHR5cGluZyBpbXBvcnQgY2FzdAoKaW1wb3J0IGR1Y2tkYgoKZnJvbSAuY3JfdGVzdGV2YWwgaW1wb3J0IENSVGVzdENhc2UsIENSVGVzdEV2YWwKCgpjbGFzcyBERExUZXN0Q2FzZShDUlRlc3RFdmFsKToKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBldmFsdWF0ZV90ZXN0Y2FzZSggICMgbm9xYTogQzkwMSwgUExSMDkxMiwgUExSMDkxNQogICAgICAgIHRlc3RjYXNlOiBDUlRlc3RDYXNlLAogICAgICAgIHN0dWRlbnRfYW5zd2VyOiBzdHIsCiAgICAgICAgaGlkZV9yZXN0X2lmX2ZhaWw6IGJvb2wsCiAgICAgICAgKiprd2FyZ3M6IHN0ciB8IGludCwKICAgICkgLT4gdHVwbGVbc3RyLCBzdHIsIGJvb2wsIGxpc3Rbc3RyXV06CiAgICAgICAgZGJfcGF0aCA9IGNhc3QoInN0ciIsIGt3YXJncy5nZXQoImRiX3dvcmtpbmciKSkKICAgICAgICBtYXhfd2lkdGggPSBjYXN0KCJpbnQiLCBrd2FyZ3MuZ2V0KCJtYXhfd2lkdGgiKSkKICAgICAgICBtYXhfcm93cyA9IGNhc3QoImludCIsIGt3YXJncy5nZXQoIm1heF9yb3dzIikpCgogICAgICAgIGlmIGRiX3BhdGggPT0gIjptZW1vcnk6IjoKICAgICAgICAgICAgZGJfd29ya2luZ19wYXRoID0gZGJfcGF0aCAgIyBVc2UgaW4tbWVtb3J5IGRhdGFiYXNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGJfd29ya2luZ19wYXRoID0gZiJ7ZGJfcGF0aH0uY29weSIKICAgICAgICAgICAgc2h1dGlsLmNvcHlmaWxlKGRiX3BhdGgsIGRiX3dvcmtpbmdfcGF0aCkgICMgQ29weSBjbGVhbiB3cml0ZWFibGUgZGIgZmlsZQoKICAgICAgICBhZGRpdGlvbmFsX2luZm8gPSB0ZXN0Y2FzZS5hZGRpdGlvbmFsX2luZm8gaWYgdGVzdGNhc2UuYWRkaXRpb25hbF9pbmZvIGVsc2Uge30KICAgICAgICBpZiAia2V5d29yZF9wcmVzZW50IiBpbiBhZGRpdGlvbmFsX2luZm86CiAgICAgICAgICAgIGtleXdvcmQgPSBhZGRpdGlvbmFsX2luZm9bImtleXdvcmRfcHJlc2VudCJdLmxvd2VyKCkKICAgICAgICAgICAgaWYga2V5d29yZCBpbiBzdHVkZW50X2Fuc3dlci5sb3dlcigpOgogICAgICAgICAgICAgICAgYWN0dWFsX3Jlc3BvbnNlID0gZiJLZXl3b3JkICd7a2V5d29yZH0nIGlzIHByZXNlbnQuIi5sb3dlcigpCiAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsX3Jlc3BvbnNlLCB0ZXN0Y2FzZS5leHBlY3RlZF9yZXN1bHQsIFRydWUsIFtdCiAgICAgICAgICAgIGFjdHVhbF9yZXNwb25zZSA9IGYiS2V5d29yZCAne2tleXdvcmR9JyBub3QgZm91bmQgaW4gc3R1ZGVudCBhbnN3ZXIuIi5sb3dlcigpCiAgICAgICAgICAgIHJldHVybiBhY3R1YWxfcmVzcG9uc2UsIHRlc3RjYXNlLmV4cGVjdGVkX3Jlc3VsdCwgRmFsc2UsIFtdCgogICAgICAgIHN0ZG91dF9jYXB0dXJlID0gaW8uU3RyaW5nSU8oKQogICAgICAgIHdpdGggcmVkaXJlY3Rfc3Rkb3V0KHN0ZG91dF9jYXB0dXJlKToKICAgICAgICAgICAgY29uID0gZHVja2RiLmNvbm5lY3QoZGJfd29ya2luZ19wYXRoLCBjb25maWc9eyJ0ZW1wX2RpcmVjdG9yeSI6IFBhdGguY3dkKCl9KQoKICAgICAgICAgICAgIyBTZXQgREIgcGFyYW1ldGVycwogICAgICAgICAgICBjb24uc3FsKAogICAgICAgICAgICAgICAgZiIiIlNFVCBtZW1vcnlfbGltaXQgPSAne2t3YXJncy5nZXQoInF1ZXN0aW9uX21lbWxpbWl0bWIiLCAyMDAwKX1NQic7IiIiCiAgICAgICAgICAgICAgICAiIiJTRVQgdGhyZWFkcyA9IDE7IiIiCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGVycm9ycyA9IFtdCgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEV4ZWN1dGUgc3R1ZGVudCBhbnN3ZXIKICAgICAgICAgICAgICAgIGNvbi5zcWwoc3R1ZGVudF9hbnN3ZXIpCiAgICAgICAgICAgIGV4Y2VwdCBkdWNrZGIuRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoc3RyKGUpKQogICAgICAgICAgICAgICAgY29uLmNsb3NlKCkKCiAgICAgICAgICAgICAgICByZXR1cm4gIiIsICIiLCBGYWxzZSwgZXJyb3JzCgogICAgICAgICAgICAjIEV4ZWN1dGUgdGVzdCBjb2RlCiAgICAgICAgICAgIHN0YXRlbWVudHMgPSBbcyBmb3IgcyBpbiB0ZXN0Y2FzZS50ZXN0Y29kZS5zcGxpdCgiOyIpIGlmIHMuc3RyaXAoKV0KCiAgICAgICAgICAgIGZvciBzdGF0ZW1lbnQgaW4gc3RhdGVtZW50czoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZXMgPSBjb24uc3FsKHN0YXRlbWVudCkKICAgICAgICAgICAgICAgICAgICByZXMuc2hvdyhtYXhfd2lkdGg9bWF4X3dpZHRoLCBtYXhfcm93cz1tYXhfcm93cykgaWYgcmVzIGVsc2UgcHJpbnQocmVzKQogICAgICAgICAgICAgICAgZXhjZXB0IChkdWNrZGIuQ29uc3RyYWludEV4Y2VwdGlvbiwgZHVja2RiLkNvbnZlcnNpb25FeGNlcHRpb24pIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgIyBEdWNrREIgcHJpbnRzIHRoZSBpbmRpdmlkdWFsIGNvbnN0cmFpbnQgaW1wbGVtZW50YXRpb24gaW4gdGhlIGVycm9yIG1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAjIHNvIHdlIGhhdmUgdG8gZmlsdGVyIGl0IG91dC4KICAgICAgICAgICAgICAgICAgICB0dXQgPSByZS5zZWFyY2gociJJTlNFUlQgSU5UTyAoLis/KSAiLCBzdGF0ZW1lbnQpCiAgICAgICAgICAgICAgICAgICAgdGFibGVfdW5kZXJfdGVzdCA9IHR1dC5ncm91cCgxKSBpZiB0dXQgZWxzZSAiIyMgdW5rbm93bl90YWJsZSAjIyIKICAgICAgICAgICAgICAgICAgICB0YWJsZV9mbGV4X2VudW1zID0gYWRkaXRpb25hbF9pbmZvLmdldCgiZmxleF9lbnVtX3RhYmxlcyIsIFtdKQoKICAgICAgICAgICAgICAgICAgICBtYXRjaF9jaGVjayA9IHJlLnNlYXJjaCgKICAgICAgICAgICAgICAgICAgICAgICAgciJeQ29uc3RyYWludCBFcnJvcjogQ0hFQ0sgY29uc3RyYWludCBmYWlsZWQgb24gdGFibGUgKC4rPykgLiokIiwgc3RyKGUpCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBtYXRjaF9lbnVtID0gcmUuc2VhcmNoKAogICAgICAgICAgICAgICAgICAgICAgICByIl5Db252ZXJzaW9uIEVycm9yOiBDb3VsZCBub3QgY29udmVydC4qJCIsIHN0cihlKSwgcmUuTVVMVElMSU5FCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hfY2hlY2sgb3IgbWF0Y2hfZW51bSkgYW5kIHRhYmxlX3VuZGVyX3Rlc3QgaW4gdGFibGVfZmxleF9lbnVtczoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIkNIRUNLIGNvbnN0cmFpbnQgZmFpbGVkIG9yIHdyb25nIEVOVU0gaW4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJ0YWJsZSB7dGFibGVfdW5kZXJfdGVzdH0iLmxvd2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGVsaWYgbWF0Y2hfY2hlY2s6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiQ0hFQ0sgY29uc3RyYWludCBmYWlsZWQgb24gdGFibGUge3RhYmxlX3VuZGVyX3Rlc3R9Ii5sb3dlcigpKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHN0cihlKS5sb3dlcigpKQogICAgICAgICAgICAgICAgICAgICAgICAjIGVycm9ycy5hcHBlbmQoc3RyKGUpIGlmIG5vdCBoaWRlX3Jlc3RfaWZfZmFpbCBlbHNlICIiKQogICAgICAgICAgICAgICAgZXhjZXB0IGR1Y2tkYi5FcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgIHByaW50KHN0cihlKS5sb3dlcigpKQogICAgICAgICAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoc3RyKGUpIGlmIG5vdCBoaWRlX3Jlc3RfaWZfZmFpbCBlbHNlICIiKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIHJhaXNlIChlKQoKICAgICAgICAgICAgY29uLmNsb3NlKCkKCiAgICAgICAgICAgIGlmIGRiX3dvcmtpbmdfcGF0aCAhPSAiOm1lbW9yeToiOgogICAgICAgICAgICAgICAgIyBSZW1vdmUgdGhlIHRlbXBvcmFyeSBkYXRhYmFzZSBmaWxlIGFmdGVyIHVzZQogICAgICAgICAgICAgICAgUGF0aChkYl93b3JraW5nX3BhdGgpLnVubGluaygpCgogICAgICAgICAgICByZWNlaXZlZF9yZXN1bHQgPSBzdGRvdXRfY2FwdHVyZS5nZXR2YWx1ZSgpCgogICAgICAgICAgICBldmFsdWF0ZWRfcmVzdWx0ID0gcmVjZWl2ZWRfcmVzdWx0ID09IHRlc3RjYXNlLmV4cGVjdGVkX3Jlc3VsdAogICAgICAgICAgICAjIFJlc3RvcmUgc3Rkb3V0LgoKICAgICAgICByZXR1cm4gcmVjZWl2ZWRfcmVzdWx0LCB0ZXN0Y2FzZS5leHBlY3RlZF9yZXN1bHQsIGV2YWx1YXRlZF9yZXN1bHQsIGVycm9ycwo=
        </file>
        <file name="cr_testeval.py" path="/" encoding="base64">
            ZnJvbSBhYmMgaW1wb3J0IEFCQywgYWJzdHJhY3RtZXRob2QKZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCmZyb20gZW51bSBpbXBvcnQgU3RyRW51bQpmcm9tIHR5cGluZyBpbXBvcnQgQW55CgoKY2xhc3MgQ1JEaXNwbGF5VHlwZShTdHJFbnVtKToKICAgIFNIT1cgPSAiU0hPVyIKICAgIEhJREUgPSAiSElERSIKICAgIEhJREVfSUZfU1VDQ0VFRCA9ICJISURFX0lGX1NVQ0NFRUQiCiAgICBISURFX0lGX0ZBSUwgPSAiSElERV9JRl9GQUlMIgoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fc3RyKGNscywgdmFsdWU6IHN0cikgLT4gIkNSRGlzcGxheVR5cGUiOgogICAgICAgICIiIkNvbnZlcnQgYSBzdHJpbmcgdG8gYSBEaXNwbGF5VHlwZSBlbnVtLiIiIgogICAgICAgIHJldHVybiBjbHModmFsdWUudXBwZXIoKSkgaWYgdmFsdWUgZWxzZSBjbHMuU0hPVwoKCkBkYXRhY2xhc3MKY2xhc3MgQ1JUZXN0Q2FzZToKICAgIHRlc3Rjb2RlOiBzdHIKICAgIGV4dHJhOiBzdHIKICAgIGV4cGVjdGVkX3Jlc3VsdDogc3RyCiAgICB0ZXN0Y2FzZV9tYXg6IGZsb2F0CiAgICBhZGRpdGlvbmFsX2luZm86IGRpY3Rbc3RyLCBBbnldIHwgTm9uZQogICAgaGlkZV9yZXN0X2lmX2ZhaWw6IGJvb2wKICAgIGRpc3BsYXk6IENSRGlzcGxheVR5cGUKCgpjbGFzcyBDUlRlc3RFdmFsKEFCQyk6CiAgICBAc3RhdGljbWV0aG9kCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBldmFsdWF0ZV90ZXN0Y2FzZSgKICAgICAgICB0ZXN0Y2FzZTogQ1JUZXN0Q2FzZSwKICAgICAgICBzdHVkZW50X2Fuc3dlcjogc3RyLAogICAgICAgIGhpZGVfcmVzdF9pZl9mYWlsOiBib29sLAogICAgICAgICoqa3dhcmdzOiBzdHIgfCBpbnQsCiAgICApIC0+IHR1cGxlW3N0ciwgc3RyLCBib29sLCBsaXN0W3N0cl1dOgogICAgICAgICIiIkV2YWx1YXRlIGEgc2luZ2xlIHRlc3QgY2FzZS4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGVzdGNhc2U6IFRoZSB0ZXN0IGNhc2UgdG8gZXZhbHVhdGUuCiAgICAgICAgICAgIHN0dWRlbnRfYW5zd2VyOiBUaGUgc3R1ZGVudCdzIGFuc3dlciB0byBiZSBldmFsdWF0ZWQuCiAgICAgICAgICAgIGhpZGVfcmVzdF9pZl9mYWlsOiBXaGV0aGVyIHRvIGhpZGUgdGhlIHJlc3Qgb2YgdGhlIHRlc3QgY2FzZXMgaWYgdGhpcyBvbmUgZmFpbHMuCiAgICAgICAgICAgIGt3YXJnczogQWRkaXRpb25hbCBrZXl3b3JkIGFyZ3VtZW50cyBmb3IgZXZhbHVhdGlvbi4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgLSBBIHR1cGxlIGNvbnRhaW5pbmc6CiAgICAgICAgICAgICAgICAtIHN0cjogVGhlIHJlY2VpdmVkIHJlc3VsdC4KICAgICAgICAgICAgICAgIC0gc3RyOiBUaGUgZXhwZWN0ZWQgcmVzdWx0LgogICAgICAgICAgICAgICAgLSBib29sOiBXaGV0aGVyIHRoZSB0ZXN0IGNhc2UgcGFzc2VkLgogICAgICAgICAgICAgICAgLSBsaXN0W3N0cl06IEFueSBlcnJvcnMgZW5jb3VudGVyZWQgZHVyaW5nIGV2YWx1YXRpb24uCiAgICAgICAgIiIiCg==
        </file>
        <file name="__init__.py" path="/" encoding="base64">
        </file>
    </testcases>
</question>
<question type="category">
    <category>
        <text>$module$/DDL-DML</text>
    </category>
</question>
<question type="coderunner">
    <name>
        <text>DDL-DB inmemory</text>
    </name>
    <questiontext format="html">
        <text><![CDATA[<p>This is a DDL question with a inmemory db</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
        <text><![CDATA[<p>Die Beschreibungen der Tests geben Ihnen Hinweise auf die Korrektheit Ihrer Lösung.</p>]]></text>
    </generalfeedback>
    <idnumber></idnumber>
    <defaultgrade>8.0</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[]]></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns><![CDATA[[["Testfall", "extra"], ["Bewertung", "awarded"]]]]></resultcolumns>
    <template><![CDATA[from __future__ import annotations

import json
import os
import shutil
import sys

os.mkdir("cr_testeval")
shutil.move("__init__.py", "cr_testeval")
shutil.move("cr_testeval.py", "cr_testeval")
shutil.move("ddl_testeval.py", "cr_testeval")

from cr_testeval.cr_testeval import CRTestCase, CRDisplayType
from cr_testeval.ddl_testeval import DDLTestCase

import duckdb

MAX_ROWS = 50
MAX_WIDTH = 500

# Use Twig to get students answer
student_answer = """{{ STUDENT_ANSWER | e('py') }}""".rstrip()

# Parsing the student answer
if not student_answer.endswith(";"):
    student_answer = student_answer + ";"
if "pragma" in student_answer.lower():
    raise ValueError("It is not allowed to use PRAGMA statements.")

# Getting the database file
db_files = [fname for fname in os.listdir() if fname.endswith(".db")]
if len(db_files) == 0:
    db_working = ":memory:"
elif len(db_files) == 1:
    db_working = db_files[0]  # Strip .db extension
else:
    raise Exception("Multiple DB files not implemented yet, sorry!")

SEPARATOR = "#<ab@17943918#@>#"
#test_results = [["Testfall", "Bewertung", "Maximal erreichbar", "iscorrect", "ishidden"]]
test_results = [["Testfall", "Erhalten", "Erwartet", "iscorrect", "ishidden", ""]]

old_stdout = sys.stdout

test_cases = []
# Collecting all test cases
{% for TEST in TESTCASES %}

tc_max = {{ TEST.mark | e('py') }}
tc_max = tc_max if tc_max > 0.005 else 0.0

test_cases.append(
    CRTestCase(
        testcode="""{{ TEST.testcode | e('py') }}""",
        extra="""{{ TEST.extra | e('py') }}""",
        expected_result="""{{ TEST.expected | e('py') }}""",
        testcase_max=tc_max,
        additional_info= {{ TEST.stdin | e('py') }},
        hide_rest_if_fail= {{ TEST.hiderestiffail | e('py') }},
        display=CRDisplayType.from_str("{{ TEST.display | e('py') }}"),
    ))

{% endfor %}

question_memlimitmb = "{{ QUESTION.memlimitmb | e('py') }}"

abort_tests = False

hide_rest_if_fail = False
awarded_points = 0.0
first_error = ""

for tc in test_cases:
    if not abort_tests and not hide_rest_if_fail:
        received_result, expected_result, evaluated_result, errors = DDLTestCase.evaluate_testcase(testcase=tc,
                                                                                                   student_answer=student_answer,
                                                                                                   hide_rest_if_fail=hide_rest_if_fail,
                                                                                                   db_working=db_working,
                                                                                                   db_files=db_files,
                                                                                                   max_rows=MAX_ROWS,
                                                                                                   max_width=MAX_WIDTH,
                                                                                                   question_memlimitmb=question_memlimitmb)

        testcase_max = tc.testcase_max
        testcase_grade = testcase_max if evaluated_result else 0.0
        awarded_points += testcase_grade

        tc_grade_str = f"{testcase_grade:.3f}" if testcase_max > 0.005 else "–––"
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc.extra,
            " " * (10 - len(tc_grade_str)) + tc_grade_str,
            " " * (10 - len(tc_max_str)) + tc_max_str,
            evaluated_result,
            hide_rest_if_fail
            or tc.display == CRDisplayType.HIDE
            or (tc.display == CRDisplayType.HIDE_IF_SUCCEED and evaluated_result)
            or (tc.display == CRDisplayType.HIDE_IF_FAIL and not evaluated_result),
            ""
        ])

        test_results.append([
            tc.extra,
            received_result,
            expected_result,
            evaluated_result,
            True,
            tc.testcode
        ])

        if errors:
            first_error = [e for e in errors if e.strip()][0] if errors else None
            abort_tests = True

        hide_rest_if_fail = (tc.hide_rest_if_fail and not evaluated_result) or hide_rest_if_fail

    else:
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc.extra,
            " " * 5 + "0.000",
            " " * (10 - len(tc_max_str)) + tc_max_str,
            False,
            not tc.hide_rest_if_fail
        ])

total_points = sum(tc.testcase_max for tc in test_cases)

if first_error:
    error_out = f'<h3>Erste Fehlermeldung</h3><pre style="margin-bottom: 1em"><code>{first_error}</code></pre>'
else:
    error_out = '<h3>Keine Fehlermeldungen gefunden 🙂</h3>'

output = {
    'fraction': awarded_points / total_points if total_points > 0 else 0,
    'prologuehtml': error_out,
    "epiloguehtml": f"<h3>Gesamtpunktzahl: {awarded_points} / {total_points}</h3>",
    'testresults': test_results,
    "showdifferences": True
}

print(json.dumps(output))
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>0</allowmultiplestdins>
    <answer><![CDATA[CREATE TABLE thisisatest (id INTEGER PRIMARY KEY,
                                     name TEXT NOT NULL);]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang>sql</acelang>
    <sandbox></sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandboxparams><![CDATA[{"numprocs": 200}]]></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <extractcodefromjson>1</extractcodefromjson>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>ace</uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
        <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="0.001">
            <testcode>
                <text><![CDATA[SELECT version() AS "version";]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌─────────┐
│ version │
│ varchar │
├─────────┤
│ v1.2.2  │
└─────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Test auf Laufzeitfehler]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);

----------
 -- Column types
-- fixed types
WITH flex_cols AS
  (SELECT lower(unnest(map_keys(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }))) AS name_type),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name)
SELECT lower(name_type),
       datatype
FROM student_datatype ANTI
JOIN flex_cols ON student_datatype.name_type = flex_cols.name_type
ORDER BY lower(name_type);

-- flexible types
WITH flextype_table AS
  (SELECT unnest(map_entries(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }), RECURSIVE := TRUE)),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name),
     flextype_flat AS
  (SELECT lower("key") AS col,
          unnest("value") AS datatype
   FROM flextype_table),
     correct_types AS
  (SELECT flextype_flat.col AS flexible_column_name
   FROM flextype_flat
   JOIN student_datatype ON flextype_flat.col = student_datatype.name_type
   AND flextype_flat.datatype = student_datatype.datatype)
SELECT lower(flexible_column_name),
       '## viable_flex_type ##' AS flex_type
FROM correct_types
UNION ALL
SELECT DISTINCT lower(flextype_flat.col) AS flexible_column_name,
                '## non_viable_flex_type ##' AS flex_type
FROM flextype_flat ANTI
JOIN correct_types ON flextype_flat.col = correct_types.flexible_column_name;

----------
 -- Not null columns

SELECT lower(name) AS name_notnull_nopk
FROM pragma_table_info("thisisatest")
WHERE "notnull"
  AND NOT "pk"
  AND NOT "dflt_value"
ORDER BY lower(name);

----------
 -- Unique constraint

SELECT lower(unnest(constraint_column_names)) AS name_unique
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'UNIQUE'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_unique);

----------
 -- Primary key columns

SELECT lower(name) AS name_primarykey
FROM pragma_table_info("thisisatest")
WHERE pk
ORDER BY lower(name);

----------
 -- Foreign key columns

SELECT lower(unnest(constraint_column_names)) AS name_fk_from,
       lower(constraint_text) AS fk_constraint_text
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'FOREIGN KEY'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_fk_from);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

┌──────────────────┬──────────┐
│ lower(name_type) │ datatype │
│     varchar      │ varchar  │
├──────────────────┼──────────┤
│ name             │ VARCHAR  │
└──────────────────┴──────────┘

┌─────────────────────────────┬────────────────────────┐
│ lower(flexible_column_name) │       flex_type        │
│           varchar           │        varchar         │
├─────────────────────────────┼────────────────────────┤
│ id                          │ ## viable_flex_type ## │
└─────────────────────────────┴────────────────────────┘

┌───────────────────┐
│ name_notnull_nopk │
│      varchar      │
├───────────────────┤
│      0 rows       │
└───────────────────┘

┌─────────────┐
│ name_unique │
│   varchar   │
├─────────────┤
│   0 rows    │
└─────────────┘

┌─────────────────┐
│ name_primarykey │
│     varchar     │
├─────────────────┤
│ id              │
└─────────────────┘

┌──────────────┬────────────────────┐
│ name_fk_from │ fk_constraint_text │
│   varchar    │      varchar       │
├──────────────┴────────────────────┤
│              0 rows               │
└───────────────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Tabelle thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Attribute thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Primary key columns

SELECT lower(name) AS name_primarykey
FROM pragma_table_info("thisisatest")
WHERE pk
ORDER BY lower(name);

----------
 -- Foreign key columns

SELECT lower(unnest(constraint_column_names)) AS name_fk_from,
       lower(constraint_text) AS fk_constraint_text
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'FOREIGN KEY'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_fk_from);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌─────────────────┐
│ name_primarykey │
│     varchar     │
├─────────────────┤
│ id              │
└─────────────────┘

┌──────────────┬────────────────────┐
│ name_fk_from │ fk_constraint_text │
│   varchar    │      varchar       │
├──────────────┴────────────────────┤
│              0 rows               │
└───────────────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit thisisatest primarykeys foreignkeys]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
            <testcode>
                <text><![CDATA[-- Column types
-- fixed types
WITH flex_cols AS
  (SELECT lower(unnest(map_keys(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }))) AS name_type),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name)
SELECT lower(name_type),
       datatype
FROM student_datatype ANTI
JOIN flex_cols ON student_datatype.name_type = flex_cols.name_type
ORDER BY lower(name_type);

-- flexible types
WITH flextype_table AS
  (SELECT unnest(map_entries(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }), RECURSIVE := TRUE)),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name),
     flextype_flat AS
  (SELECT lower("key") AS col,
          unnest("value") AS datatype
   FROM flextype_table),
     correct_types AS
  (SELECT flextype_flat.col AS flexible_column_name
   FROM flextype_flat
   JOIN student_datatype ON flextype_flat.col = student_datatype.name_type
   AND flextype_flat.datatype = student_datatype.datatype)
SELECT lower(flexible_column_name),
       '## viable_flex_type ##' AS flex_type
FROM correct_types
UNION ALL
SELECT DISTINCT lower(flextype_flat.col) AS flexible_column_name,
                '## non_viable_flex_type ##' AS flex_type
FROM flextype_flat ANTI
JOIN correct_types ON flextype_flat.col = correct_types.flexible_column_name;]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────────┬──────────┐
│ lower(name_type) │ datatype │
│     varchar      │ varchar  │
├──────────────────┼──────────┤
│ name             │ VARCHAR  │
└──────────────────┴──────────┘

┌─────────────────────────────┬────────────────────────┐
│ lower(flexible_column_name) │       flex_type        │
│           varchar           │        varchar         │
├─────────────────────────────┼────────────────────────┤
│ id                          │ ## viable_flex_type ## │
└─────────────────────────────┴────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Test with template and test types]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <file name="ddl_testeval.py" path="/" encoding="base64">
            aW1wb3J0IGlvCmltcG9ydCByZQppbXBvcnQgc2h1dGlsCmZyb20gY29udGV4dGxpYiBpbXBvcnQgcmVkaXJlY3Rfc3Rkb3V0CmZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aApmcm9tIHR5cGluZyBpbXBvcnQgY2FzdAoKaW1wb3J0IGR1Y2tkYgoKZnJvbSAuY3JfdGVzdGV2YWwgaW1wb3J0IENSVGVzdENhc2UsIENSVGVzdEV2YWwKCgpjbGFzcyBERExUZXN0Q2FzZShDUlRlc3RFdmFsKToKICAgIEBzdGF0aWNtZXRob2QKICAgIGRlZiBldmFsdWF0ZV90ZXN0Y2FzZSggICMgbm9xYTogQzkwMSwgUExSMDkxMiwgUExSMDkxNQogICAgICAgIHRlc3RjYXNlOiBDUlRlc3RDYXNlLAogICAgICAgIHN0dWRlbnRfYW5zd2VyOiBzdHIsCiAgICAgICAgaGlkZV9yZXN0X2lmX2ZhaWw6IGJvb2wsCiAgICAgICAgKiprd2FyZ3M6IHN0ciB8IGludCwKICAgICkgLT4gdHVwbGVbc3RyLCBzdHIsIGJvb2wsIGxpc3Rbc3RyXV06CiAgICAgICAgZGJfcGF0aCA9IGNhc3QoInN0ciIsIGt3YXJncy5nZXQoImRiX3dvcmtpbmciKSkKICAgICAgICBtYXhfd2lkdGggPSBjYXN0KCJpbnQiLCBrd2FyZ3MuZ2V0KCJtYXhfd2lkdGgiKSkKICAgICAgICBtYXhfcm93cyA9IGNhc3QoImludCIsIGt3YXJncy5nZXQoIm1heF9yb3dzIikpCgogICAgICAgIGlmIGRiX3BhdGggPT0gIjptZW1vcnk6IjoKICAgICAgICAgICAgZGJfd29ya2luZ19wYXRoID0gZGJfcGF0aCAgIyBVc2UgaW4tbWVtb3J5IGRhdGFiYXNlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGJfd29ya2luZ19wYXRoID0gZiJ7ZGJfcGF0aH0uY29weSIKICAgICAgICAgICAgc2h1dGlsLmNvcHlmaWxlKGRiX3BhdGgsIGRiX3dvcmtpbmdfcGF0aCkgICMgQ29weSBjbGVhbiB3cml0ZWFibGUgZGIgZmlsZQoKICAgICAgICBhZGRpdGlvbmFsX2luZm8gPSB0ZXN0Y2FzZS5hZGRpdGlvbmFsX2luZm8gaWYgdGVzdGNhc2UuYWRkaXRpb25hbF9pbmZvIGVsc2Uge30KICAgICAgICBpZiAia2V5d29yZF9wcmVzZW50IiBpbiBhZGRpdGlvbmFsX2luZm86CiAgICAgICAgICAgIGtleXdvcmQgPSBhZGRpdGlvbmFsX2luZm9bImtleXdvcmRfcHJlc2VudCJdLmxvd2VyKCkKICAgICAgICAgICAgaWYga2V5d29yZCBpbiBzdHVkZW50X2Fuc3dlci5sb3dlcigpOgogICAgICAgICAgICAgICAgYWN0dWFsX3Jlc3BvbnNlID0gZiJLZXl3b3JkICd7a2V5d29yZH0nIGlzIHByZXNlbnQuIi5sb3dlcigpCiAgICAgICAgICAgICAgICByZXR1cm4gYWN0dWFsX3Jlc3BvbnNlLCB0ZXN0Y2FzZS5leHBlY3RlZF9yZXN1bHQsIFRydWUsIFtdCiAgICAgICAgICAgIGFjdHVhbF9yZXNwb25zZSA9IGYiS2V5d29yZCAne2tleXdvcmR9JyBub3QgZm91bmQgaW4gc3R1ZGVudCBhbnN3ZXIuIi5sb3dlcigpCiAgICAgICAgICAgIHJldHVybiBhY3R1YWxfcmVzcG9uc2UsIHRlc3RjYXNlLmV4cGVjdGVkX3Jlc3VsdCwgRmFsc2UsIFtdCgogICAgICAgIHN0ZG91dF9jYXB0dXJlID0gaW8uU3RyaW5nSU8oKQogICAgICAgIHdpdGggcmVkaXJlY3Rfc3Rkb3V0KHN0ZG91dF9jYXB0dXJlKToKICAgICAgICAgICAgY29uID0gZHVja2RiLmNvbm5lY3QoZGJfd29ya2luZ19wYXRoLCBjb25maWc9eyJ0ZW1wX2RpcmVjdG9yeSI6IFBhdGguY3dkKCl9KQoKICAgICAgICAgICAgIyBTZXQgREIgcGFyYW1ldGVycwogICAgICAgICAgICBjb24uc3FsKAogICAgICAgICAgICAgICAgZiIiIlNFVCBtZW1vcnlfbGltaXQgPSAne2t3YXJncy5nZXQoInF1ZXN0aW9uX21lbWxpbWl0bWIiLCAyMDAwKX1NQic7IiIiCiAgICAgICAgICAgICAgICAiIiJTRVQgdGhyZWFkcyA9IDE7IiIiCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGVycm9ycyA9IFtdCgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAjIEV4ZWN1dGUgc3R1ZGVudCBhbnN3ZXIKICAgICAgICAgICAgICAgIGNvbi5zcWwoc3R1ZGVudF9hbnN3ZXIpCiAgICAgICAgICAgIGV4Y2VwdCBkdWNrZGIuRXJyb3IgYXMgZToKICAgICAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoc3RyKGUpKQogICAgICAgICAgICAgICAgY29uLmNsb3NlKCkKCiAgICAgICAgICAgICAgICByZXR1cm4gIiIsICIiLCBGYWxzZSwgZXJyb3JzCgogICAgICAgICAgICAjIEV4ZWN1dGUgdGVzdCBjb2RlCiAgICAgICAgICAgIHN0YXRlbWVudHMgPSBbcyBmb3IgcyBpbiB0ZXN0Y2FzZS50ZXN0Y29kZS5zcGxpdCgiOyIpIGlmIHMuc3RyaXAoKV0KCiAgICAgICAgICAgIGZvciBzdGF0ZW1lbnQgaW4gc3RhdGVtZW50czoKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICByZXMgPSBjb24uc3FsKHN0YXRlbWVudCkKICAgICAgICAgICAgICAgICAgICByZXMuc2hvdyhtYXhfd2lkdGg9bWF4X3dpZHRoLCBtYXhfcm93cz1tYXhfcm93cykgaWYgcmVzIGVsc2UgcHJpbnQocmVzKQogICAgICAgICAgICAgICAgZXhjZXB0IChkdWNrZGIuQ29uc3RyYWludEV4Y2VwdGlvbiwgZHVja2RiLkNvbnZlcnNpb25FeGNlcHRpb24pIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgIyBEdWNrREIgcHJpbnRzIHRoZSBpbmRpdmlkdWFsIGNvbnN0cmFpbnQgaW1wbGVtZW50YXRpb24gaW4gdGhlIGVycm9yIG1lc3NhZ2UKICAgICAgICAgICAgICAgICAgICAjIHNvIHdlIGhhdmUgdG8gZmlsdGVyIGl0IG91dC4KICAgICAgICAgICAgICAgICAgICB0dXQgPSByZS5zZWFyY2gociJJTlNFUlQgSU5UTyAoLis/KSAiLCBzdGF0ZW1lbnQpCiAgICAgICAgICAgICAgICAgICAgdGFibGVfdW5kZXJfdGVzdCA9IHR1dC5ncm91cCgxKSBpZiB0dXQgZWxzZSAiIyMgdW5rbm93bl90YWJsZSAjIyIKICAgICAgICAgICAgICAgICAgICB0YWJsZV9mbGV4X2VudW1zID0gYWRkaXRpb25hbF9pbmZvLmdldCgiZmxleF9lbnVtX3RhYmxlcyIsIFtdKQoKICAgICAgICAgICAgICAgICAgICBtYXRjaF9jaGVjayA9IHJlLnNlYXJjaCgKICAgICAgICAgICAgICAgICAgICAgICAgciJeQ29uc3RyYWludCBFcnJvcjogQ0hFQ0sgY29uc3RyYWludCBmYWlsZWQgb24gdGFibGUgKC4rPykgLiokIiwgc3RyKGUpCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBtYXRjaF9lbnVtID0gcmUuc2VhcmNoKAogICAgICAgICAgICAgICAgICAgICAgICByIl5Db252ZXJzaW9uIEVycm9yOiBDb3VsZCBub3QgY29udmVydC4qJCIsIHN0cihlKSwgcmUuTVVMVElMSU5FCiAgICAgICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hfY2hlY2sgb3IgbWF0Y2hfZW51bSkgYW5kIHRhYmxlX3VuZGVyX3Rlc3QgaW4gdGFibGVfZmxleF9lbnVtczoKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIkNIRUNLIGNvbnN0cmFpbnQgZmFpbGVkIG9yIHdyb25nIEVOVU0gaW4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiJ0YWJsZSB7dGFibGVfdW5kZXJfdGVzdH0iLmxvd2VyKCkKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIGVsaWYgbWF0Y2hfY2hlY2s6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiQ0hFQ0sgY29uc3RyYWludCBmYWlsZWQgb24gdGFibGUge3RhYmxlX3VuZGVyX3Rlc3R9Ii5sb3dlcigpKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KHN0cihlKS5sb3dlcigpKQogICAgICAgICAgICAgICAgICAgICAgICAjIGVycm9ycy5hcHBlbmQoc3RyKGUpIGlmIG5vdCBoaWRlX3Jlc3RfaWZfZmFpbCBlbHNlICIiKQogICAgICAgICAgICAgICAgZXhjZXB0IGR1Y2tkYi5FcnJvciBhcyBlOgogICAgICAgICAgICAgICAgICAgIHByaW50KHN0cihlKS5sb3dlcigpKQogICAgICAgICAgICAgICAgICAgIGVycm9ycy5hcHBlbmQoc3RyKGUpIGlmIG5vdCBoaWRlX3Jlc3RfaWZfZmFpbCBlbHNlICIiKQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgICAgIHJhaXNlIChlKQoKICAgICAgICAgICAgY29uLmNsb3NlKCkKCiAgICAgICAgICAgIGlmIGRiX3dvcmtpbmdfcGF0aCAhPSAiOm1lbW9yeToiOgogICAgICAgICAgICAgICAgIyBSZW1vdmUgdGhlIHRlbXBvcmFyeSBkYXRhYmFzZSBmaWxlIGFmdGVyIHVzZQogICAgICAgICAgICAgICAgUGF0aChkYl93b3JraW5nX3BhdGgpLnVubGluaygpCgogICAgICAgICAgICByZWNlaXZlZF9yZXN1bHQgPSBzdGRvdXRfY2FwdHVyZS5nZXR2YWx1ZSgpCgogICAgICAgICAgICBldmFsdWF0ZWRfcmVzdWx0ID0gcmVjZWl2ZWRfcmVzdWx0ID09IHRlc3RjYXNlLmV4cGVjdGVkX3Jlc3VsdAogICAgICAgICAgICAjIFJlc3RvcmUgc3Rkb3V0LgoKICAgICAgICByZXR1cm4gcmVjZWl2ZWRfcmVzdWx0LCB0ZXN0Y2FzZS5leHBlY3RlZF9yZXN1bHQsIGV2YWx1YXRlZF9yZXN1bHQsIGVycm9ycwo=
        </file>
        <file name="cr_testeval.py" path="/" encoding="base64">
            ZnJvbSBhYmMgaW1wb3J0IEFCQywgYWJzdHJhY3RtZXRob2QKZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCmZyb20gZW51bSBpbXBvcnQgU3RyRW51bQpmcm9tIHR5cGluZyBpbXBvcnQgQW55CgoKY2xhc3MgQ1JEaXNwbGF5VHlwZShTdHJFbnVtKToKICAgIFNIT1cgPSAiU0hPVyIKICAgIEhJREUgPSAiSElERSIKICAgIEhJREVfSUZfU1VDQ0VFRCA9ICJISURFX0lGX1NVQ0NFRUQiCiAgICBISURFX0lGX0ZBSUwgPSAiSElERV9JRl9GQUlMIgoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGZyb21fc3RyKGNscywgdmFsdWU6IHN0cikgLT4gIkNSRGlzcGxheVR5cGUiOgogICAgICAgICIiIkNvbnZlcnQgYSBzdHJpbmcgdG8gYSBEaXNwbGF5VHlwZSBlbnVtLiIiIgogICAgICAgIHJldHVybiBjbHModmFsdWUudXBwZXIoKSkgaWYgdmFsdWUgZWxzZSBjbHMuU0hPVwoKCkBkYXRhY2xhc3MKY2xhc3MgQ1JUZXN0Q2FzZToKICAgIHRlc3Rjb2RlOiBzdHIKICAgIGV4dHJhOiBzdHIKICAgIGV4cGVjdGVkX3Jlc3VsdDogc3RyCiAgICB0ZXN0Y2FzZV9tYXg6IGZsb2F0CiAgICBhZGRpdGlvbmFsX2luZm86IGRpY3Rbc3RyLCBBbnldIHwgTm9uZQogICAgaGlkZV9yZXN0X2lmX2ZhaWw6IGJvb2wKICAgIGRpc3BsYXk6IENSRGlzcGxheVR5cGUKCgpjbGFzcyBDUlRlc3RFdmFsKEFCQyk6CiAgICBAc3RhdGljbWV0aG9kCiAgICBAYWJzdHJhY3RtZXRob2QKICAgIGRlZiBldmFsdWF0ZV90ZXN0Y2FzZSgKICAgICAgICB0ZXN0Y2FzZTogQ1JUZXN0Q2FzZSwKICAgICAgICBzdHVkZW50X2Fuc3dlcjogc3RyLAogICAgICAgIGhpZGVfcmVzdF9pZl9mYWlsOiBib29sLAogICAgICAgICoqa3dhcmdzOiBzdHIgfCBpbnQsCiAgICApIC0+IHR1cGxlW3N0ciwgc3RyLCBib29sLCBsaXN0W3N0cl1dOgogICAgICAgICIiIkV2YWx1YXRlIGEgc2luZ2xlIHRlc3QgY2FzZS4KCiAgICAgICAgQXJnczoKICAgICAgICAgICAgdGVzdGNhc2U6IFRoZSB0ZXN0IGNhc2UgdG8gZXZhbHVhdGUuCiAgICAgICAgICAgIHN0dWRlbnRfYW5zd2VyOiBUaGUgc3R1ZGVudCdzIGFuc3dlciB0byBiZSBldmFsdWF0ZWQuCiAgICAgICAgICAgIGhpZGVfcmVzdF9pZl9mYWlsOiBXaGV0aGVyIHRvIGhpZGUgdGhlIHJlc3Qgb2YgdGhlIHRlc3QgY2FzZXMgaWYgdGhpcyBvbmUgZmFpbHMuCiAgICAgICAgICAgIGt3YXJnczogQWRkaXRpb25hbCBrZXl3b3JkIGFyZ3VtZW50cyBmb3IgZXZhbHVhdGlvbi4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgLSBBIHR1cGxlIGNvbnRhaW5pbmc6CiAgICAgICAgICAgICAgICAtIHN0cjogVGhlIHJlY2VpdmVkIHJlc3VsdC4KICAgICAgICAgICAgICAgIC0gc3RyOiBUaGUgZXhwZWN0ZWQgcmVzdWx0LgogICAgICAgICAgICAgICAgLSBib29sOiBXaGV0aGVyIHRoZSB0ZXN0IGNhc2UgcGFzc2VkLgogICAgICAgICAgICAgICAgLSBsaXN0W3N0cl06IEFueSBlcnJvcnMgZW5jb3VudGVyZWQgZHVyaW5nIGV2YWx1YXRpb24uCiAgICAgICAgIiIiCg==
        </file>
        <file name="__init__.py" path="/" encoding="base64">
        </file>
    </testcases>
</question>
</quiz>
