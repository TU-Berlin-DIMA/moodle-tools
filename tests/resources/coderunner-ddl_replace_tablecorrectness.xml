<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<question type="category">
    <category>
        <text>$module$/DDL-DML</text>
    </category>
</question>
<question type="coderunner">
    <name>
        <text>DDL-DB</text>
    </name>
    <questiontext format="html">
        <text><![CDATA[<p>This is a DDL question</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
        <text><![CDATA[<p>Die Beschreibungen der Tests geben Ihnen Hinweise auf die Korrektheit Ihrer Lösung.</p>]]></text>
    </generalfeedback>
    <idnumber></idnumber>
    <defaultgrade>8.0</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[]]></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns><![CDATA[[["Testfall", "extra"], ["Bewertung", "awarded"]]]]></resultcolumns>
    <template><![CDATA[from __future__ import annotations

import json
import io
import os
import re
import shutil
import sys

import duckdb

MAX_ROWS = 50
MAX_WIDTH = 500

# Use Twig to get students answer
student_answer = """{{ STUDENT_ANSWER | e('py') }}""".rstrip()

# Parsing the student answer
if not student_answer.endswith(";"):
    student_answer = student_answer + ";"
if "pragma" in student_answer.lower():
    raise ValueError("It is not allowed to use PRAGMA statements.")

# Getting the database file
db_files = [fname for fname in os.listdir() if fname.endswith(".db")]
if len(db_files) == 0:
    db_working = ":memory:"
elif len(db_files) == 1:
    db_working = db_files[0]  # Strip .db extension
else:
    raise Exception("Multiple DB files not implemented yet, sorry!")

SEPARATOR = "#<ab@17943918#@>#"
#test_results = [["Testfall", "Bewertung", "Maximal erreichbar", "iscorrect", "ishidden"]]
test_results = [["Testfall", "Erhalten", "Erwartet", "iscorrect", "ishidden", ""]]


old_stdout = sys.stdout

test_cases = []
# Collecting all test cases
{% for TEST in TESTCASES %}

tc_max = {{ TEST.mark | e('py') }}
tc_max = tc_max if tc_max > 0.005 else 0.0

test_cases.append({
    "testcode": """{{ TEST.testcode | e('py') }}""",
    "extra": """{{ TEST.extra | e('py') }}""",
    "expected_result": """{{ TEST.expected | e('py') }}""",
    "testcase_max": tc_max,
    "additional_info": {{ TEST.stdin | e('py') }},
    "hide_rest_if_fail": {{ TEST.hiderestiffail | e('py') }},
    "display": "{{ TEST.display | e('py') }}",
})

{% endfor %}

def run_testcase(testcase, db_working, db_files):

    if db_working != ":memory:":
        db_working = f"{db_working}.copy"
        shutil.copyfile(db_files[0], db_working)  # Copy clean writeable db file




    sys.stdout = io.TextIOWrapper(io.BytesIO(), sys.stdout.encoding)

    con = duckdb.connect(db_working, config={"temp_directory": os.getcwd()})

    # Set DB parameters
    con.sql("SET memory_limit = '{{ QUESTION.memlimitmb - 50 }}MB'; SET threads = 1;")

    errors = []

    try:
        # Execute student answer
        con.sql(student_answer)
    except duckdb.Error as e:
        errors.append(str(e))
        sys.stdout.close()
        con.close()
        sys.stdout = old_stdout

        return False, "", False, errors

    # Execute test code
    statements = [s for s in testcase['testcode'].split(";") if s.strip()]

    for statement in statements:
        try:
            res = con.sql(statement)
            res.show(max_width=MAX_WIDTH, max_rows=MAX_ROWS) if res else print(res)
        except (duckdb.ConstraintException, duckdb.ConversionException) as e:
            # DuckDB prints the individual constraint implementation in the error message
            # so we have to filter it out.
            table_under_test = re.search(r"INSERT INTO (.+?) ", statement).group(1)
            table_flex_enums = testcase['additional_info'].get("flex_enum_tables", [])

            match_check = re.search(
                r"^Constraint Error: CHECK constraint failed on table (.+?) .*$", str(e)
            )

            match_enum = re.search(
                r"^Conversion Error: Could not convert.*$", str(e), re.M
            )

            if (match_check or match_enum) and table_under_test in table_flex_enums:
                print(f"CHECK constraint failed or wrong ENUM in table {table_under_test}".lower())
            elif match_check:
                print(f"CHECK constraint failed on table {table_under_test}".lower())
            else:
                print(str(e).lower())
                #errors.append(str(e) if not hide_rest_if_fail else "")
        except duckdb.Error as e:
            print(str(e).lower())
            errors.append(str(e) if not hide_rest_if_fail else "")
        except Exception as e:
            raise (e)

    sys.stdout.seek(0)
    received_result = sys.stdout.read()

    evaluated_result = received_result == testcase['expected_result']
    # Restore stdout.
    sys.stdout.close()
    con.close()
    sys.stdout = old_stdout

    return received_result, testcase['expected_result'], evaluated_result, errors

abort_tests = False

hide_rest_if_fail = False
awarded_points = 0.0
first_error = ""

for tc in test_cases:
    if not abort_tests:
        received_result, expected_result, evaluated_result, errors = run_testcase(tc, db_working, db_files)

        testcase_max = tc['testcase_max']
        testcase_grade = testcase_max if evaluated_result else 0.0
        awarded_points += testcase_grade

        tc_grade_str = f"{testcase_grade:.3f}" if testcase_max > 0.005 else "–––"
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc['extra'],
            " " * (10 - len(tc_grade_str)) + tc_grade_str,
            " " * (10 - len(tc_max_str)) + tc_max_str,
            evaluated_result,
            hide_rest_if_fail or tc['display'] == "HIDE" or (tc['display'] == "HIDE_IF_SUCCEED" and evaluated_result) or (tc['display'] == "HIDE_IF_FAIL" and not evaluated_result),
            ""
        ])

        test_results.append([
            tc['extra'],
            received_result,
            expected_result,
            evaluated_result,
            True,
            tc['testcode']
        ])

        if errors:
            first_error = [e for e in errors if e.strip()][0] if errors else None
            abort_tests = True

        hide_rest_if_fail = (tc['hide_rest_if_fail'] and not evaluated_result) or hide_rest_if_fail

    else:
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc['extra'],
            " " * 5 + "0.000",
            " " * (10 - len(tc_max_str)) + tc_max_str,
            False,
            True
        ])



total_points = sum(tc['testcase_max'] for tc in test_cases)


if first_error:
    error_out = f'<h3>Erste Fehlermeldung</h3><pre style="margin-bottom: 1em"><code>{first_error}</code></pre>'
else:
    error_out = '<h3>Keine Fehlermeldungen gefunden 🙂</h3>'

output = {
    'fraction': awarded_points / total_points if total_points > 0 else 0,
    'prologuehtml': error_out,
    "epiloguehtml": f"<h3>Gesamtpunktzahl: {awarded_points} / {total_points}</h3>",
    'testresults': test_results,
    "showdifferences": True
}


print(json.dumps(output))
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>0</allowmultiplestdins>
    <answer><![CDATA[CREATE TABLE thisisatest (id INTEGER PRIMARY KEY,
                                     name TEXT NOT NULL);]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang>sql</acelang>
    <sandbox></sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandboxparams><![CDATA[{"numprocs": 200}]]></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <extractcodefromjson>1</extractcodefromjson>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>ace</uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
        <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="0.001">
            <testcode>
                <text><![CDATA[SELECT version() AS VERSION;]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌─────────┐
│ version │
│ varchar │
├─────────┤
│ v1.2.2  │
└─────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Test auf Laufzeitfehler]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);

----------
 -- Column types
-- fixed types
WITH flex_cols AS
  (SELECT lower(unnest(map_keys(MAP {}))) AS name_type),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name)
SELECT lower(name_type),
       datatype
FROM student_datatype ANTI
JOIN flex_cols ON student_datatype.name_type = flex_cols.name_type
ORDER BY lower(name_type);

-- flexible types
WITH flextype_table AS
  (SELECT unnest(map_entries(MAP {}), RECURSIVE := TRUE)),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name),
     flextype_flat AS
  (SELECT lower("key") AS col,
          unnest("value") AS datatype
   FROM flextype_table),
     correct_types AS
  (SELECT flextype_flat.col AS flexible_column_name
   FROM flextype_flat
   JOIN student_datatype ON flextype_flat.col = student_datatype.name_type
   AND flextype_flat.datatype = student_datatype.datatype)
SELECT lower(flexible_column_name),
       '## viable_flex_type ##' AS flex_type
FROM correct_types
UNION ALL
SELECT DISTINCT lower(flextype_flat.col) AS flexible_column_name,
                '## non_viable_flex_type ##' AS flex_type
FROM flextype_flat ANTI
JOIN correct_types ON flextype_flat.col = correct_types.flexible_column_name;

----------
 -- Not null columns

SELECT lower(name) AS name_notnull_nopk
FROM pragma_table_info("thisisatest")
WHERE "notnull"
  AND NOT "pk"
  AND NOT "dflt_value"
ORDER BY lower(name);

----------
 -- Unique constraint

SELECT lower(unnest(constraint_column_names)) AS name_unique
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'UNIQUE'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_unique);

----------
 -- Primary key columns

SELECT lower(name) AS name_primarykey
FROM pragma_table_info("thisisatest")
WHERE pk
ORDER BY lower(name);

----------
 -- Foreign key columns

SELECT lower(unnest(constraint_column_names)) AS name_fk_from,
       lower(constraint_text) AS fk_constraint_text
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'FOREIGN KEY'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_fk_from);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

┌──────────────────┬──────────┐
│ lower(name_type) │ datatype │
│     varchar      │ varchar  │
├──────────────────┼──────────┤
│ id               │ INTEGER  │
│ name             │ VARCHAR  │
└──────────────────┴──────────┘

┌─────────────────────────────┬───────────┐
│ lower(flexible_column_name) │ flex_type │
│           varchar           │  varchar  │
├─────────────────────────────┴───────────┤
│                 0 rows                  │
└─────────────────────────────────────────┘

┌───────────────────┐
│ name_notnull_nopk │
│      varchar      │
├───────────────────┤
│      0 rows       │
└───────────────────┘

┌─────────────┐
│ name_unique │
│   varchar   │
├─────────────┤
│   0 rows    │
└─────────────┘

┌─────────────────┐
│ name_primarykey │
│     varchar     │
├─────────────────┤
│ id              │
└─────────────────┘

┌──────────────┬────────────────────┐
│ name_fk_from │ fk_constraint_text │
│   varchar    │      varchar       │
├──────────────┴────────────────────┤
│              0 rows               │
└───────────────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Tabelle thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Attribute thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <file name="emptydb.db" path="/" encoding="base64">
            
        </file>
    </testcases>
</question>
<question type="category">
    <category>
        <text>$module$/DDL-DML</text>
    </category>
</question>
<question type="coderunner">
    <name>
        <text>DDL-DB inmemory</text>
    </name>
    <questiontext format="html">
        <text><![CDATA[<p>This is a DDL question with a inmemory db</p>]]></text>
    </questiontext>
    <generalfeedback format="html">
        <text><![CDATA[<p>Die Beschreibungen der Tests geben Ihnen Hinweise auf die Korrektheit Ihrer Lösung.</p>]]></text>
    </generalfeedback>
    <idnumber></idnumber>
    <defaultgrade>8.0</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <coderunnertype>python3</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>0</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[]]></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns><![CDATA[[["Testfall", "extra"], ["Bewertung", "awarded"]]]]></resultcolumns>
    <template><![CDATA[from __future__ import annotations

import json
import io
import os
import re
import shutil
import sys

import duckdb

MAX_ROWS = 50
MAX_WIDTH = 500

# Use Twig to get students answer
student_answer = """{{ STUDENT_ANSWER | e('py') }}""".rstrip()

# Parsing the student answer
if not student_answer.endswith(";"):
    student_answer = student_answer + ";"
if "pragma" in student_answer.lower():
    raise ValueError("It is not allowed to use PRAGMA statements.")

# Getting the database file
db_files = [fname for fname in os.listdir() if fname.endswith(".db")]
if len(db_files) == 0:
    db_working = ":memory:"
elif len(db_files) == 1:
    db_working = db_files[0]  # Strip .db extension
else:
    raise Exception("Multiple DB files not implemented yet, sorry!")

SEPARATOR = "#<ab@17943918#@>#"
#test_results = [["Testfall", "Bewertung", "Maximal erreichbar", "iscorrect", "ishidden"]]
test_results = [["Testfall", "Erhalten", "Erwartet", "iscorrect", "ishidden", ""]]


old_stdout = sys.stdout

test_cases = []
# Collecting all test cases
{% for TEST in TESTCASES %}

tc_max = {{ TEST.mark | e('py') }}
tc_max = tc_max if tc_max > 0.005 else 0.0

test_cases.append({
    "testcode": """{{ TEST.testcode | e('py') }}""",
    "extra": """{{ TEST.extra | e('py') }}""",
    "expected_result": """{{ TEST.expected | e('py') }}""",
    "testcase_max": tc_max,
    "additional_info": {{ TEST.stdin | e('py') }},
    "hide_rest_if_fail": {{ TEST.hiderestiffail | e('py') }},
    "display": "{{ TEST.display | e('py') }}",
})

{% endfor %}

def run_testcase(testcase, db_working, db_files):

    if db_working != ":memory:":
        db_working = f"{db_working}.copy"
        shutil.copyfile(db_files[0], db_working)  # Copy clean writeable db file




    sys.stdout = io.TextIOWrapper(io.BytesIO(), sys.stdout.encoding)

    con = duckdb.connect(db_working, config={"temp_directory": os.getcwd()})

    # Set DB parameters
    con.sql("SET memory_limit = '{{ QUESTION.memlimitmb - 50 }}MB'; SET threads = 1;")

    errors = []

    try:
        # Execute student answer
        con.sql(student_answer)
    except duckdb.Error as e:
        errors.append(str(e))
        sys.stdout.close()
        con.close()
        sys.stdout = old_stdout

        return False, "", False, errors

    # Execute test code
    statements = [s for s in testcase['testcode'].split(";") if s.strip()]

    for statement in statements:
        try:
            res = con.sql(statement)
            res.show(max_width=MAX_WIDTH, max_rows=MAX_ROWS) if res else print(res)
        except (duckdb.ConstraintException, duckdb.ConversionException) as e:
            # DuckDB prints the individual constraint implementation in the error message
            # so we have to filter it out.
            table_under_test = re.search(r"INSERT INTO (.+?) ", statement).group(1)
            table_flex_enums = testcase['additional_info'].get("flex_enum_tables", [])

            match_check = re.search(
                r"^Constraint Error: CHECK constraint failed on table (.+?) .*$", str(e)
            )

            match_enum = re.search(
                r"^Conversion Error: Could not convert.*$", str(e), re.M
            )

            if (match_check or match_enum) and table_under_test in table_flex_enums:
                print(f"CHECK constraint failed or wrong ENUM in table {table_under_test}".lower())
            elif match_check:
                print(f"CHECK constraint failed on table {table_under_test}".lower())
            else:
                print(str(e).lower())
                #errors.append(str(e) if not hide_rest_if_fail else "")
        except duckdb.Error as e:
            print(str(e).lower())
            errors.append(str(e) if not hide_rest_if_fail else "")
        except Exception as e:
            raise (e)

    sys.stdout.seek(0)
    received_result = sys.stdout.read()

    evaluated_result = received_result == testcase['expected_result']
    # Restore stdout.
    sys.stdout.close()
    con.close()
    sys.stdout = old_stdout

    return received_result, testcase['expected_result'], evaluated_result, errors

abort_tests = False

hide_rest_if_fail = False
awarded_points = 0.0
first_error = ""

for tc in test_cases:
    if not abort_tests:
        received_result, expected_result, evaluated_result, errors = run_testcase(tc, db_working, db_files)

        testcase_max = tc['testcase_max']
        testcase_grade = testcase_max if evaluated_result else 0.0
        awarded_points += testcase_grade

        tc_grade_str = f"{testcase_grade:.3f}" if testcase_max > 0.005 else "–––"
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc['extra'],
            " " * (10 - len(tc_grade_str)) + tc_grade_str,
            " " * (10 - len(tc_max_str)) + tc_max_str,
            evaluated_result,
            hide_rest_if_fail or tc['display'] == "HIDE" or (tc['display'] == "HIDE_IF_SUCCEED" and evaluated_result) or (tc['display'] == "HIDE_IF_FAIL" and not evaluated_result),
            ""
        ])

        test_results.append([
            tc['extra'],
            received_result,
            expected_result,
            evaluated_result,
            True,
            tc['testcode']
        ])

        if errors:
            first_error = [e for e in errors if e.strip()][0] if errors else None
            abort_tests = True

        hide_rest_if_fail = (tc['hide_rest_if_fail'] and not evaluated_result) or hide_rest_if_fail

    else:
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "–––"

        test_results.append([
            tc['extra'],
            " " * 5 + "0.000",
            " " * (10 - len(tc_max_str)) + tc_max_str,
            False,
            True
        ])



total_points = sum(tc['testcase_max'] for tc in test_cases)


if first_error:
    error_out = f'<h3>Erste Fehlermeldung</h3><pre style="margin-bottom: 1em"><code>{first_error}</code></pre>'
else:
    error_out = '<h3>Keine Fehlermeldungen gefunden 🙂</h3>'

output = {
    'fraction': awarded_points / total_points if total_points > 0 else 0,
    'prologuehtml': error_out,
    "epiloguehtml": f"<h3>Gesamtpunktzahl: {awarded_points} / {total_points}</h3>",
    'testresults': test_results,
    "showdifferences": True
}


print(json.dumps(output))
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>0</allowmultiplestdins>
    <answer><![CDATA[CREATE TABLE thisisatest (id INTEGER PRIMARY KEY,
                                     name TEXT NOT NULL);]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang>sql</acelang>
    <sandbox></sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb>2000</memlimitmb>
    <sandboxparams><![CDATA[{"numprocs": 200}]]></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>0</hoisttemplateparams>
    <extractcodefromjson>1</extractcodefromjson>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>ace</uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>0</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
        <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="0.001">
            <testcode>
                <text><![CDATA[SELECT version() AS VERSION;]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌─────────┐
│ version │
│ varchar │
├─────────┤
│ v1.2.2  │
└─────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Test auf Laufzeitfehler]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);

----------
 -- Column types
-- fixed types
WITH flex_cols AS
  (SELECT lower(unnest(map_keys(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }))) AS name_type),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name)
SELECT lower(name_type),
       datatype
FROM student_datatype ANTI
JOIN flex_cols ON student_datatype.name_type = flex_cols.name_type
ORDER BY lower(name_type);

-- flexible types
WITH flextype_table AS
  (SELECT unnest(map_entries(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }), RECURSIVE := TRUE)),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name),
     flextype_flat AS
  (SELECT lower("key") AS col,
          unnest("value") AS datatype
   FROM flextype_table),
     correct_types AS
  (SELECT flextype_flat.col AS flexible_column_name
   FROM flextype_flat
   JOIN student_datatype ON flextype_flat.col = student_datatype.name_type
   AND flextype_flat.datatype = student_datatype.datatype)
SELECT lower(flexible_column_name),
       '## viable_flex_type ##' AS flex_type
FROM correct_types
UNION ALL
SELECT DISTINCT lower(flextype_flat.col) AS flexible_column_name,
                '## non_viable_flex_type ##' AS flex_type
FROM flextype_flat ANTI
JOIN correct_types ON flextype_flat.col = correct_types.flexible_column_name;

----------
 -- Not null columns

SELECT lower(name) AS name_notnull_nopk
FROM pragma_table_info("thisisatest")
WHERE "notnull"
  AND NOT "pk"
  AND NOT "dflt_value"
ORDER BY lower(name);

----------
 -- Unique constraint

SELECT lower(unnest(constraint_column_names)) AS name_unique
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'UNIQUE'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_unique);

----------
 -- Primary key columns

SELECT lower(name) AS name_primarykey
FROM pragma_table_info("thisisatest")
WHERE pk
ORDER BY lower(name);

----------
 -- Foreign key columns

SELECT lower(unnest(constraint_column_names)) AS name_fk_from,
       lower(constraint_text) AS fk_constraint_text
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'FOREIGN KEY'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_fk_from);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

┌──────────────────┬──────────┐
│ lower(name_type) │ datatype │
│     varchar      │ varchar  │
├──────────────────┼──────────┤
│ name             │ VARCHAR  │
└──────────────────┴──────────┘

┌─────────────────────────────┬────────────────────────┐
│ lower(flexible_column_name) │       flex_type        │
│           varchar           │        varchar         │
├─────────────────────────────┼────────────────────────┤
│ id                          │ ## viable_flex_type ## │
└─────────────────────────────┴────────────────────────┘

┌───────────────────┐
│ name_notnull_nopk │
│      varchar      │
├───────────────────┤
│      0 rows       │
└───────────────────┘

┌─────────────┐
│ name_unique │
│   varchar   │
├─────────────┤
│   0 rows    │
└─────────────┘

┌─────────────────┐
│ name_primarykey │
│     varchar     │
├─────────────────┤
│ id              │
└─────────────────┘

┌──────────────┬────────────────────┐
│ name_fk_from │ fk_constraint_text │
│   varchar    │      varchar       │
├──────────────┴────────────────────┤
│              0 rows               │
└───────────────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Tabelle thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Column names

SELECT lower(name) AS name_columns
FROM pragma_table_info("thisisatest")
ORDER BY lower(name);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────┐
│ name_columns │
│   varchar    │
├──────────────┤
│ id           │
│ name         │
└──────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit Attribute thisisatest]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="0.5">
            <testcode>
                <text><![CDATA[-- Primary key columns

SELECT lower(name) AS name_primarykey
FROM pragma_table_info("thisisatest")
WHERE pk
ORDER BY lower(name);

----------
 -- Foreign key columns

SELECT lower(unnest(constraint_column_names)) AS name_fk_from,
       lower(constraint_text) AS fk_constraint_text
FROM duckdb_constraints()
WHERE SCHEMA_NAME='main'
  AND constraint_type = 'FOREIGN KEY'
  AND lower(TABLE_NAME)=lower('thisisatest')
ORDER BY lower(name_fk_from);]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌─────────────────┐
│ name_primarykey │
│     varchar     │
├─────────────────┤
│ id              │
└─────────────────┘

┌──────────────┬────────────────────┐
│ name_fk_from │ fk_constraint_text │
│   varchar    │      varchar       │
├──────────────┴────────────────────┤
│              0 rows               │
└───────────────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Korrektheit thisisatest primarykeys foreignkeys]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
        <testcase testtype="0" useasexample="0" hiderestiffail="0" mark="1.0">
            <testcode>
                <text><![CDATA[-- Column types
-- fixed types
WITH flex_cols AS
  (SELECT lower(unnest(map_keys(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }))) AS name_type),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name)
SELECT lower(name_type),
       datatype
FROM student_datatype ANTI
JOIN flex_cols ON student_datatype.name_type = flex_cols.name_type
ORDER BY lower(name_type);

-- flexible types
WITH flextype_table AS
  (SELECT unnest(map_entries(MAP { 'id': [
        'INTEGER',
        'UINTEGER'
    ] }), RECURSIVE := TRUE)),
     student_datatype AS
  (SELECT lower(name) AS name_type,
          TYPE AS datatype
   FROM pragma_table_info("thisisatest")
   ORDER BY name),
     flextype_flat AS
  (SELECT lower("key") AS col,
          unnest("value") AS datatype
   FROM flextype_table),
     correct_types AS
  (SELECT flextype_flat.col AS flexible_column_name
   FROM flextype_flat
   JOIN student_datatype ON flextype_flat.col = student_datatype.name_type
   AND flextype_flat.datatype = student_datatype.datatype)
SELECT lower(flexible_column_name),
       '## viable_flex_type ##' AS flex_type
FROM correct_types
UNION ALL
SELECT DISTINCT lower(flextype_flat.col) AS flexible_column_name,
                '## non_viable_flex_type ##' AS flex_type
FROM flextype_flat ANTI
JOIN correct_types ON flextype_flat.col = correct_types.flexible_column_name;]]></text>
            </testcode>
            <stdin>
                <text><![CDATA[{}]]></text>
            </stdin>
            <expected>
                <text><![CDATA[┌──────────────────┬──────────┐
│ lower(name_type) │ datatype │
│     varchar      │ varchar  │
├──────────────────┼──────────┤
│ name             │ VARCHAR  │
└──────────────────┴──────────┘

┌─────────────────────────────┬────────────────────────┐
│ lower(flexible_column_name) │       flex_type        │
│           varchar           │        varchar         │
├─────────────────────────────┼────────────────────────┤
│ id                          │ ## viable_flex_type ## │
└─────────────────────────────┴────────────────────────┘

]]></text>
            </expected>
            <extra>
                <text><![CDATA[Test with template and test types]]></text>
            </extra>
            <display>
                <text>SHOW</text>
            </display>
        </testcase>
    </testcases>
</question>
</quiz>
