from __future__ import annotations

import json
import os
import shutil
import sys

os.mkdir("cr_testeval")
shutil.move("__init__.py", "cr_testeval")
shutil.move("cr_testeval.py", "cr_testeval")
shutil.move("dql_testeval.py", "cr_testeval")

from cr_testeval.cr_testeval import CRTestCase, CRDisplayType
from cr_testeval.dql_testeval import DQLTestCase, DQLTestResult

MAX_ROWS = 50
MAX_WIDTH = 500

# Use Twig to get students answer
student_answer = """{{ STUDENT_ANSWER | e('py') }}""".rstrip()

# Parsing the student answer
if not student_answer.endswith(";"):
    student_answer = student_answer + ";"
if "pragma" in student_answer.lower():
    raise ValueError("It is not allowed to use PRAGMA statements.")

# Getting the database file
db_files = [fname for fname in os.listdir() if fname.endswith(".db")]
if len(db_files) == 0:
    db_working = ":memory:"
elif len(db_files) == 1:
    db_working = db_files[0]  # Strip .db extension
else:
    raise Exception("Multiple DB files not implemented yet, sorry!")

test_results = []

old_stdout = sys.stdout

test_cases = []
# Collecting all test cases
{% for TEST in TESTCASES %}

tc_max = {{ TEST.mark | e('py') }}
tc_max = tc_max if tc_max > 0.005 else 0.0

test_cases.append(
    CRTestCase(
        testcode="""{{ TEST.testcode | e('py') }}""",
        extra="""{{ TEST.extra | e('py') }}""",
        expected_result="""{{ TEST.expected | e('py') }}""",
        testcase_max=tc_max,
        additional_info={{ TEST.stdin | e('py') }},
        hide_rest_if_fail={{ TEST.hiderestiffail | e('py') }},
        display=CRDisplayType.from_str("{{ TEST.display | e('py') }}"),
    ))

{% endfor %}

question_memlimitmb = "{{ QUESTION.memlimitmb | e('py') }}"

abort_tests = False

hide_rest_if_fail = False
first_error = ""

all_groups = set((tc.additional_info["group"], tc.testcase_max) for tc in test_cases if "group" in tc.additional_info)
grouped_testresults = {group[0]: {"result": [], "max_points": group[1]} for group in all_groups}

for tc in test_cases:
    testcase_max = tc.testcase_max

    if not abort_tests and not hide_rest_if_fail:
        actual_response, expected_result, is_correct, errors = DQLTestCase.evaluate_testcase(
            testcase=tc,
            student_answer=student_answer,
            hide_rest_if_fail=hide_rest_if_fail,
            db_working=db_working,
            max_width=MAX_WIDTH,
            max_rows=MAX_ROWS,
            question_memlimitmb=question_memlimitmb,
        )

        testcase_grade = testcase_max if is_correct else 0.0

        if not "group" in tc.additional_info:
            test_results.append(
                DQLTestResult(
                    test_name=tc.extra,
                    received=actual_response,
                    expected=expected_result,
                    awarded=testcase_grade,
                    max_points=testcase_max,
                    is_correct=is_correct,
                    is_hidden=hide_rest_if_fail
                              or tc.display == CRDisplayType.HIDE
                              or (tc.display == CRDisplayType.HIDE_IF_SUCCEED and is_correct)
                              or (tc.display == CRDisplayType.HIDE_IF_FAIL and not is_correct)
                )
            )
        else:
            grouped_testresults[tc.additional_info["group"]]["result"].append(
                DQLTestResult(
                    test_name=tc.extra,
                    received=actual_response,
                    expected=expected_result,
                    awarded=None,
                    max_points=None,
                    is_correct=is_correct,
                    is_hidden=hide_rest_if_fail
                              or tc.display == CRDisplayType.HIDE
                              or (tc.display == CRDisplayType.HIDE_IF_SUCCEED and is_correct)
                              or (tc.display == CRDisplayType.HIDE_IF_FAIL and not is_correct)
                )
            )

        if errors:
            first_error = [e for e in errors if e.strip()][0] if errors else None
            abort_tests = True

        hide_rest_if_fail = (tc.hide_rest_if_fail and not is_correct) or hide_rest_if_fail
    else:
        if not "group" in tc.additional_info:
            test_results.append(
                DQLTestResult(
                    test_name=tc.extra,
                    received="",
                    expected=tc.expected_result,
                    awarded=0,
                    max_points=testcase_max,
                    is_correct=False,
                    is_hidden=not hide_rest_if_fail
                )
            )
        else:
            grouped_testresults[tc.additional_info["group"]]["result"].append(
                DQLTestResult(
                    test_name=tc.extra,
                    received="",
                    expected=tc.expected_result,
                    awarded=None,
                    max_points=None,
                    is_correct=False,
                    is_hidden=not hide_rest_if_fail
                )
            )

total_points_groups = 0

for group, params in grouped_testresults.items():
    if params["result"]:
        results = params["result"]
        all_correct = all(r.is_correct for r in results)
        all_hidden = all(r.is_hidden for r in results)
        awarded_points = params["max_points"] if all_correct else 0.0

        test_results.extend(results)

        test_results.append(
            DQLTestResult(
                test_name=f"Gesamtergebnis fÃ¼r TestfÃ¤lle in {group}",
                received="",
                expected="",
                awarded=awarded_points,
                max_points=params["max_points"],
                is_correct=all_correct,
                is_hidden=all_hidden
            )
        )

awarded_points = sum(
    tr.awarded for tr in test_results if tr.awarded is not None
)

total_points = sum(
    tr.max_points for tr in test_results if tr.max_points is not None
)

hidden_failed_testresults_exist = any(
    not tr.is_correct and tr.is_hidden for tr in test_results
)

if first_error:
    error_out = f'<h3>Erste Fehlermeldung</h3><pre style="margin-bottom: 1em"><code>{first_error}</code></pre>'
elif hidden_failed_testresults_exist:
    error_out = '<h3>Einige versteckte TestfÃ¤lle sind fehlgeschlagen.</h3>'
else:
    error_out = '<h3>Keine Fehlermeldungen gefunden ðŸ™‚</h3>'

output = {
    'fraction': awarded_points / total_points if total_points > 0 else 0,
    'prologuehtml': error_out,
    "epiloguehtml": f"<h3>Gesamtpunktzahl: {awarded_points} / {total_points}</h3>",
    'testresults': [DQLTestResult.get_header()] + [tr.to_list() for tr in test_results],
    "showdifferences": True
}

print(json.dumps(output))
