from __future__ import annotations

import json
import io
import os
import re
import shutil
import sys

import duckdb

MAX_ROWS = 50
MAX_WIDTH = 500

# Use Twig to get students answer
student_answer = """{{ STUDENT_ANSWER | e('py') }}""".rstrip()

# Parsing the student answer
if not student_answer.endswith(";"):
    student_answer = student_answer + ";"
if "pragma" in student_answer.lower():
    raise ValueError("It is not allowed to use PRAGMA statements.")

# Getting the database file
db_files = [fname for fname in os.listdir() if fname.endswith(".db")]
if len(db_files) == 0:
    db_working = ":memory:"
elif len(db_files) == 1:
    db_working = db_files[0]  # Strip .db extension
else:
    raise Exception("Multiple DB files not implemented yet, sorry!")

SEPARATOR = "#<ab@17943918#@>#"
#test_results = [["Testfall", "Bewertung", "Maximal erreichbar", "iscorrect", "ishidden"]]
test_results = [["Testfall", "Erhalten", "Erwartet", "iscorrect", "ishidden", ""]]


old_stdout = sys.stdout

test_cases = []
# Collecting all test cases
{% for TEST in TESTCASES %}

tc_max = {{ TEST.mark | e('py') }}
tc_max = tc_max if tc_max > 0.005 else 0.0

test_cases.append({
    "testcode": """{{ TEST.testcode | e('py') }}""",
    "extra": """{{ TEST.extra | e('py') }}""",
    "expected_result": """{{ TEST.expected | e('py') }}""",
    "testcase_max": tc_max,
    "additional_info": {{ TEST.stdin | e('py') }},
    "hide_rest_if_fail": {{ TEST.hiderestiffail | e('py') }},
    "display": "{{ TEST.display | e('py') }}",
})

{% endfor %}

def run_testcase(testcase, db_working, db_files):

    if db_working != ":memory:":
        db_working = f"{db_working}.copy"
        shutil.copyfile(db_files[0], db_working)  # Copy clean writeable db file

    additional_info = testcase['additional_info']
    if "keyword_present" in additional_info:
        keyword = additional_info['keyword_present'].lower()
        # If the test case has a keyword_presents, we need to check if it is present in the student answer.
        if keyword in student_answer.lower():
            actual_response = f"Keyword '{keyword}' is present.".lower()
            return actual_response, testcase['expected_result'], True, []
        else:
            actual_response = f"Keyword '{keyword}' not found in student answer.".lower()
            return actual_response, testcase['expected_result'], False, []

    sys.stdout = io.TextIOWrapper(io.BytesIO(), sys.stdout.encoding)

    con = duckdb.connect(db_working, config={"temp_directory": os.getcwd()})

    # Set DB parameters
    con.sql("SET memory_limit = '{{ QUESTION.memlimitmb - 50 }}MB'; SET threads = 1;")

    errors = []

    try:
        # Execute student answer
        con.sql(student_answer)
    except duckdb.Error as e:
        errors.append(str(e))
        sys.stdout.close()
        con.close()
        sys.stdout = old_stdout

        return False, "", False, errors

    # Execute test code
    statements = [s for s in testcase['testcode'].split(";") if s.strip()]

    for statement in statements:
        try:
            res = con.sql(statement)
            res.show(max_width=MAX_WIDTH, max_rows=MAX_ROWS) if res else print(res)
        except (duckdb.ConstraintException, duckdb.ConversionException) as e:
            # DuckDB prints the individual constraint implementation in the error message
            # so we have to filter it out.
            table_under_test = re.search(r"INSERT INTO (.+?) ", statement).group(1)
            table_flex_enums = testcase['additional_info'].get("flex_enum_tables", [])

            match_check = re.search(
                r"^Constraint Error: CHECK constraint failed on table (.+?) .*$", str(e)
            )

            match_enum = re.search(
                r"^Conversion Error: Could not convert.*$", str(e), re.M
            )

            if (match_check or match_enum) and table_under_test in table_flex_enums:
                print(f"CHECK constraint failed or wrong ENUM in table {table_under_test}".lower())
            elif match_check:
                print(f"CHECK constraint failed on table {table_under_test}".lower())
            else:
                print(str(e).lower())
                #errors.append(str(e) if not hide_rest_if_fail else "")
        except duckdb.Error as e:
            print(str(e).lower())
            errors.append(str(e) if not hide_rest_if_fail else "")
        except Exception as e:
            raise (e)

    sys.stdout.seek(0)
    received_result = sys.stdout.read()

    evaluated_result = received_result == testcase['expected_result']
    # Restore stdout.
    sys.stdout.close()
    con.close()
    sys.stdout = old_stdout

    return received_result, testcase['expected_result'], evaluated_result, errors

abort_tests = False

hide_rest_if_fail = False
awarded_points = 0.0
first_error = ""

for tc in test_cases:
    if not abort_tests and not hide_rest_if_fail:
        received_result, expected_result, evaluated_result, errors = run_testcase(tc, db_working, db_files)

        testcase_max = tc['testcase_max']
        testcase_grade = testcase_max if evaluated_result else 0.0
        awarded_points += testcase_grade

        tc_grade_str = f"{testcase_grade:.3f}" if testcase_max > 0.005 else "â€“â€“â€“"
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "â€“â€“â€“"

        test_results.append([
            tc['extra'],
            " " * (10 - len(tc_grade_str)) + tc_grade_str,
            " " * (10 - len(tc_max_str)) + tc_max_str,
            evaluated_result,
            hide_rest_if_fail or tc['display'] == "HIDE" or (tc['display'] == "HIDE_IF_SUCCEED" and evaluated_result) or (tc['display'] == "HIDE_IF_FAIL" and not evaluated_result),
            ""
        ])

        test_results.append([
            tc['extra'],
            received_result,
            expected_result,
            evaluated_result,
            True,
            tc['testcode']
        ])

        if errors:
            first_error = [e for e in errors if e.strip()][0] if errors else None
            abort_tests = True

        hide_rest_if_fail = (tc['hide_rest_if_fail'] and not evaluated_result) or hide_rest_if_fail

    else:
        tc_max_str = f"{testcase_max:.3f}" if testcase_max > 0.005 else "â€“â€“â€“"

        test_results.append([
            tc['extra'],
            " " * 5 + "0.000",
            " " * (10 - len(tc_max_str)) + tc_max_str,
            False,
            not tc['hide_rest_if_fail']
        ])



total_points = sum(tc['testcase_max'] for tc in test_cases)


if first_error:
    error_out = f'<h3>Erste Fehlermeldung</h3><pre style="margin-bottom: 1em"><code>{first_error}</code></pre>'
else:
    error_out = '<h3>Keine Fehlermeldungen gefunden ðŸ™‚</h3>'

output = {
    'fraction': awarded_points / total_points if total_points > 0 else 0,
    'prologuehtml': error_out,
    "epiloguehtml": f"<h3>Gesamtpunktzahl: {awarded_points} / {total_points}</h3>",
    'testresults': test_results,
    "showdifferences": True
}


print(json.dumps(output))
