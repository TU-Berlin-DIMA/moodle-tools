""".. include:: ../../docs/make_questions.md"""

import argparse
import sys

from moodle_tools.questions import (
    ClozeQuestion,
    CoderunnerQuestionSQL,
    MissingWordsQuestion,
    MultipleTrueFalseQuestion,
    NumericalQuestion,
    SingleSelectionMultipleChoiceQuestion,
    TrueFalseQuestion,
    QuestionFactory,
)
from moodle_tools.utils import generate_moodle_questions


def true_false(args):
    """True False Question.

    Args:
        args (args.Namespace): Namespace generated by the CLI parser.

    Returns:
        type: None.
    """
    generate_moodle_questions(TrueFalseQuestion.generate_xml, QuestionFactory, **vars(args))


def multiple_true_false(args):
    """Multiple True False Question.

    Args:
        args (args.Namespace): Namespace generated by the CLI parser.

    Returns:
        type: None.
    """
    generate_moodle_questions(MultipleTrueFalseQuestion.generate_xml, QuestionFactory, **vars(args))


def multiple_choice(args):
    """Single Selection Multiple Choice Question.

    Args:
        args (args.Namespace): Namespace generated by the CLI parser.

    Returns:
        type: None.
    """
    generate_moodle_questions(
        SingleSelectionMultipleChoiceQuestion.generate_xml, QuestionFactory, **vars(args)
    )


def cloze(args):
    """Cloze Question. Masked portion of the text.

    Args:
        args (args.Namespace): Namespace generated by the CLI parser.

    Returns:
        type: None.
    """
    generate_moodle_questions(ClozeQuestion.generate_xml, QuestionFactory, **vars(args))


def numerical(args):
    """Numerical Question.

    Args:
        args (args.Namespace): Namespace generated by the CLI parser.

    Returns:
        type: None.
    """
    generate_moodle_questions(NumericalQuestion.generate_xml, QuestionFactory, **vars(args))


def missing_words(args):
    """Missing Words Question.

    Args:
        args (args.Namespace): Namespace generated by the CLI parser.

    Returns:
        type: None.
    """
    generate_moodle_questions(MissingWordsQuestion.generate_xml, QuestionFactory, **vars(args))


def coderunner(args):
    """Coderunner Question SQL.

    Args:
        args (args.Namespace): Namespace generated by the CLI parser.

    Returns:
        type: None.
    """
    generate_moodle_questions(CoderunnerQuestionSQL.generate_xml, QuestionFactory, **vars(args))


def parse_args() -> argparse.Namespace:
    """CLI Parser.

    This function serves as the entry point from the CLI. It contains
    the main flow of the program. It parses command-line
    arguments, call functions according to the subcommand,
    which is linked to a specific Question Type.

    Returns:
        argparse.Namespace

    Raises:
        Any exceptions raised during execution.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--input",
        help="Input file (default: %(default)s)",
        type=argparse.FileType("r", encoding="utf-8"),
        default=sys.stdin,
    )
    parser.add_argument(
        "-o",
        "--output",
        help="Output file (default: %(default)s)",
        type=argparse.FileType("w", encoding="utf-8"),
        default=sys.stdout,
    )
    parser.add_argument(
        "-t",
        "--title",
        help="Default question title (default: %(default)s)",
        type=str,
        default="Knowledge question",
    )
    parser.add_argument("-l", "--lenient", help="Skip strict validation.", action="store_true")
    parser.add_argument(
        "-m",
        "--markdown",
        help="Specify question and answer text in Markdown.",
        action="store_true",
    )
    parser.add_argument(
        "--table-border",
        help="Put a 1 Pixel solid black border around each table cell",
        action="store_true",
    )
    parser.add_argument(
        "--add-question-index",
        help="Extend each question title with an increasing number.",
        action="store_true",
    )
    parser.set_defaults(command=lambda args: parser.print_help())
    subparsers = parser.add_subparsers(title="Possible commands")

    # Generate a true false question
    true_false_question = subparsers.add_parser("true_false", help="Generate Moodle XML for a true/false question.")
    true_false_question.set_defaults(func=true_false)

    # Generate a question with multiple true false questions
    multiple_true_false_question = subparsers.add_parser(
        "multiple_true_false",
        help="Generate Moodle XML for a multiple true/false question.",
    )
    multiple_true_false_question.set_defaults(func=multiple_true_false)

    # Generate a multiple choice question with a single possible selection
    multiple_choice_question = subparsers.add_parser(
        "multiple_choice",
        help="Generate Moodle XML for a multiple choice question with a single answer.",
    )
    multiple_choice_question.set_defaults(func=multiple_choice)

    # Generate a Cloze question
    cloze_question = subparsers.add_parser("cloze", help="Generate Moodle XML for a Cloze question.")
    cloze_question.set_defaults(func=cloze)

    numerical_question = subparsers.add_parser("numerical", help="Generate Moodle XML for a numerical question.")
    numerical_question.set_defaults(func=numerical)

    # Generate a missing words question
    missing_words_question = subparsers.add_parser(
        "missing_words", help="Generate Moodle XML for a missing words question."
    )
    missing_words_question.set_defaults(func=missing_words)

    # Generate Coderunner Question
    coderunner_question = subparsers.add_parser("coderunner", help="Generate Moodle XML for a coderunner question.")
    coderunner_question.set_defaults(func=coderunner)

    return parser.parse_args()


def main() -> None:
    """Entry point of the CLI Moodle Tools Generate Questions.

    This function serves as the entry point of the script or module.
    It calls and instantiates the CLI parser.

    Returns:
        None

    Raises:
        Any exceptions raised during execution.
    """
    args = parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
